#!/bin/bash
set -e

# Cores para interface
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Definir diretório de trabalho
PTERODACTYL_DIR="$HOME/workspace/pterodactyl"

# Função para exibir o logo
show_logo() {
    clear
    echo -e "${PURPLE}╔══════════════════════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${PURPLE}║                                                                              ║${NC}"
    echo -e "${PURPLE}║  ${WHITE}███████╗██████╗ ██╗ ██████╗      ██████╗ ███╗   ██╗███████╗ ${CYAN}█████╗ ${PURPLE} ║${NC}"
    echo -e "${PURPLE}║  ${WHITE}██╔════╝██╔══██╗██║██╔════╝     ██╔═══██╗████╗  ██║██╔════╝${CYAN}██╔══██╗${PURPLE} ║${NC}"
    echo -e "${PURPLE}║  ${WHITE}█████╗  ██████╔╝██║██║          ██║   ██║██╔██╗ ██║█████╗  ${CYAN}██║  ╚═╝${PURPLE} ║${NC}"
    echo -e "${PURPLE}║  ${WHITE}██╔══╝  ██╔══██╗██║██║          ██║   ██║██║╚██╗██║██╔══╝  ${CYAN}██║  ██╗${PURPLE} ║${NC}"
    echo -e "${PURPLE}║  ${WHITE}███████╗██║  ██║██║╚██████╗     ╚██████╔╝██║ ╚████║███████╗${CYAN}╚█████╔╝${PURPLE} ║${NC}"
    echo -e "${PURPLE}║  ${WHITE}╚══════╝╚═╝  ╚═╝╚═╝ ╚═════╝      ╚═════╝ ╚═╝  ╚═══╝╚══════╝${CYAN} ╚════╝ ${PURPLE} ║${NC}"
    echo -e "${PURPLE}║                                                                              ║${NC}"
    echo -e "${PURPLE}║                      ${YELLOW}Pterodactyl One-Click Installer${PURPLE}                     ║${NC}"
    echo -e "${PURPLE}║                            ${CYAN}Versão 1.0 - by Eric${PURPLE}                           ║${NC}"
    echo -e "${PURPLE}║                                                                              ║${NC}"
    echo -e "${PURPLE}╚══════════════════════════════════════════════════════════════════════════════╝${NC}"
    echo
}

# Função para pausar
pause() {
    echo -e "\n${YELLOW}Pressione ENTER para continuar...${NC}"
    read -r
}

# Função para verificar dependências e permissões
check_requirements() {
    # Verificar Docker
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}❌ Docker não está instalado!${NC}"
        echo -e "${YELLOW}Por favor, instale o Docker primeiro.${NC}"
        echo -e "${CYAN}Visite: https://docs.docker.com/get-docker/${NC}"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        echo -e "${RED}❌ Docker Compose não está disponível!${NC}"
        echo -e "${YELLOW}Por favor, instale o Docker Compose primeiro.${NC}"
        exit 1
    fi
    
    # Verificar/criar diretório principal
    echo -e "${CYAN}📁 Criando diretório principal: $PTERODACTYL_DIR${NC}"
    
    if ! mkdir -p "$PTERODACTYL_DIR" 2>/dev/null; then
        echo -e "${RED}❌ Erro ao criar diretório!${NC}"
        echo -e "${YELLOW}Tentando com sudo...${NC}"
        sudo mkdir -p "$PTERODACTYL_DIR"
        sudo chown -R $USER:$USER "$PTERODACTYL_DIR"
    fi
    
    # Verificar permissões de escrita
    if [ ! -w "$PTERODACTYL_DIR" ]; then
        echo -e "${YELLOW}⚠️  Ajustando permissões do diretório...${NC}"
        sudo chown -R $USER:$USER "$PTERODACTYL_DIR" 2>/dev/null || {
            echo -e "${RED}❌ Sem permissão de escrita em: $PTERODACTYL_DIR${NC}"
            PTERODACTYL_DIR="/tmp/pterodactyl"
            mkdir -p "$PTERODACTYL_DIR"
            echo -e "${YELLOW}Usando diretório temporário: $PTERODACTYL_DIR${NC}"
        }
    fi
    
    echo -e "${GREEN}✅ Diretório de instalação: $PTERODACTYL_DIR${NC}"
}

# Função para corrigir permissões do Wings
fix_wings_permissions() {
    echo -e "${CYAN}🔧 Preparando ambiente para o Wings...${NC}"
    
    # Criar diretório temporário se não existir
    sudo mkdir -p /tmp/pterodactyl
    sudo chown -R $USER:$USER /tmp/pterodactyl
    sudo chmod 777 /tmp/pterodactyl
    
    echo -e "${GREEN}✅ Ambiente preparado para o Wings!${NC}"
}

# Função para instalar Pterodactyl Panel
install_panel() {
    show_logo
    echo -e "${BLUE}╔════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║        ${WHITE}INSTALANDO PTERODACTYL PANEL${BLUE}    ║${NC}"
    echo -e "${BLUE}╚════════════════════════════════════════╝${NC}"
    echo
    
    echo -e "${CYAN}📁 Criando estrutura de pastas...${NC}"
    mkdir -p "$PTERODACTYL_DIR/panel"/{var,nginx,database}
    
    # Verificar se as pastas foram criadas
    if [ ! -d "$PTERODACTYL_DIR/panel" ]; then
        echo -e "${RED}❌ Falha ao criar estrutura de pastas!${NC}"
        return 1
    fi
    
    echo -e "${CYAN}📝 Criando configuração do Docker Compose...${NC}"
    
    # Criar docker-compose para o Painel
    cat > "$PTERODACTYL_DIR/panel/docker-compose.yml" << 'EOF'
version: '3.8'

services:
  panel:
    image: ghcr.io/pterodactyl/panel:latest
    restart: always
    ports:
      - "8080:80"
    environment:
      - APP_URL=http://localhost:8080
      - APP_TIMEZONE=UTC
      - DB_HOST=database
      - DB_PORT=3306
      - DB_DATABASE=panel
      - DB_USERNAME=pterodactyl
      - DB_PASSWORD=CHANGE_ME_SECURE_PASSWORD
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_DRIVER=redis
      - REDIS_HOST=cache
    volumes:
      - ./var/:/app/var
      - ./nginx/:/etc/nginx/conf.d
    depends_on:
      - database
      - cache

  database:
    image: mariadb:10.11
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=CHANGE_ROOT_PASSWORD_SECURE
      - MYSQL_DATABASE=panel
      - MYSQL_USER=pterodactyl
      - MYSQL_PASSWORD=CHANGE_ME_SECURE_PASSWORD
    volumes:
      - ./database:/var/lib/mysql
    ports:
      - "3306:3306"

  cache:
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
EOF

    echo -e "${CYAN}🚀 Iniciando containers...${NC}"
    cd "$PTERODACTYL_DIR/panel"
    
    # Usar docker compose (comando mais novo) ou docker-compose (comando legado)
    if docker compose version &> /dev/null; then
        docker compose up -d
    else
        docker-compose up -d
    fi
    
    echo -e "\n${GREEN}✅ Pterodactyl Panel instalado com sucesso!${NC}"
    echo -e "${YELLOW}📋 Informações importantes:${NC}"
    echo -e "${WHITE}   • URL do Painel: ${CYAN}http://localhost:8080${NC}"
    echo -e "${WHITE}   • Banco de dados: MariaDB na porta 3306${NC}"
    echo -e "${WHITE}   • Cache: Redis na porta 6379${NC}"
    echo -e "${WHITE}   • Arquivos: $PTERODACTYL_DIR/panel/${NC}"
    echo
    echo -e "${RED}🔐 IMPORTANTE: Altere as senhas no docker-compose.yml antes de usar em produção!${NC}"
    
    pause
}

# Função para instalar Wings
install_wings() {
    show_logo
    echo -e "${BLUE}╔════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║         ${WHITE}INSTALANDO PTERODACTYL WINGS${BLUE}    ║${NC}"
    echo -e "${BLUE}╚════════════════════════════════════════╝${NC}"
    echo
    
    # Corrigir permissões primeiro
    fix_wings_permissions
    
    echo -e "${CYAN}📁 Criando estrutura de pastas...${NC}"
    mkdir -p "$PTERODACTYL_DIR/wings"/{data,volumes}
    
    # Verificar se as pastas foram criadas
    if [ ! -d "$PTERODACTYL_DIR/wings" ]; then
        echo -e "${RED}❌ Falha ao criar estrutura de pastas!${NC}"
        return 1
    fi
    
    echo -e "${CYAN}📝 Criando configuração do Docker Compose...${NC}"
    
    # Criar docker-compose para o Wings (SOLUÇÃO 2 IMPLEMENTADA)
    cat > "$PTERODACTYL_DIR/wings/docker-compose.yml" << 'EOF'
version: '3.8'

services:
  wings:
    image: ghcr.io/pterodactyl/wings:latest
    restart: always
    network_mode: host
    tty: true
    environment:
      TZ: "UTC"
      WINGS_UID: 988
      WINGS_GID: 988
      WINGS_USERNAME: pterodactyl
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "/var/lib/docker/containers/:/var/lib/docker/containers/"
      - "./data:/etc/pterodactyl"
      - "/tmp/pterodactyl:/tmp/pterodactyl"
      - "./volumes:/var/lib/pterodactyl"  # SOLUÇÃO 2: Diretório local ao invés de /var/lib/
    working_dir: /etc/pterodactyl
EOF

    echo -e "${CYAN}🚀 Iniciando Wings...${NC}"
    cd "$PTERODACTYL_DIR/wings"
    
    # Usar docker compose (comando mais novo) ou docker-compose (comando legado)
    if docker compose version &> /dev/null; then
        docker compose up -d
    else
        docker-compose up -d
    fi
    
    echo -e "\n${GREEN}✅ Pterodactyl Wings instalado com sucesso!${NC}"
    echo -e "${YELLOW}📋 Informações importantes:${NC}"
    echo -e "${WHITE}   • Wings rodando em modo host${NC}"
    echo -e "${WHITE}   • Configuração: $PTERODACTYL_DIR/wings/data/${NC}"
    echo -e "${WHITE}   • Volumes: $PTERODACTYL_DIR/wings/volumes/${NC}"
    echo -e "${WHITE}   • Logs: docker logs pterodactyl-wings-wings-1${NC}"
    echo
    echo -e "${RED}⚠️  IMPORTANTE: Configure o arquivo config.yml no diretório data/${NC}"
    echo -e "${WHITE}   Você precisa gerar a configuração no painel administrativo!${NC}"
    
    pause
}

# Função para mostrar status
show_status() {
    show_logo
    echo -e "${BLUE}╔════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║            ${WHITE}STATUS DOS SERVIÇOS${BLUE}          ║${NC}"
    echo -e "${BLUE}╚════════════════════════════════════════╝${NC}"
    echo
    
    echo -e "${CYAN}🔍 Verificando Pterodactyl Panel...${NC}"
    if [ -d "$PTERODACTYL_DIR/panel" ]; then
        cd "$PTERODACTYL_DIR/panel"
        if docker compose ps 2>/dev/null || docker-compose ps 2>/dev/null; then
            echo -e "${GREEN}   ✅ Panel rodando${NC}"
        else
            echo -e "${YELLOW}   ⚠️  Panel parado${NC}"
        fi
    else
        echo -e "${RED}   ❌ Panel não instalado${NC}"
    fi
    
    echo -e "\n${CYAN}🔍 Verificando Pterodactyl Wings...${NC}"
    if [ -d "$PTERODACTYL_DIR/wings" ]; then
        cd "$PTERODACTYL_DIR/wings"
        if docker compose ps 2>/dev/null || docker-compose ps 2>/dev/null; then
            echo -e "${GREEN}   ✅ Wings rodando${NC}"
        else
            echo -e "${YELLOW}   ⚠️  Wings parado${NC}"
        fi
    else
        echo -e "${RED}   ❌ Wings não instalado${NC}"
    fi
    
    echo -e "\n${CYAN}🌐 URLs de acesso:${NC}"
    echo -e "${WHITE}   • Panel: ${CYAN}http://localhost:8080${NC}"
    echo -e "\n${CYAN}📂 Diretório de instalação:${NC}"
    echo -e "${WHITE}   • Localização: ${CYAN}$PTERODACTYL_DIR${NC}"
    echo -e "${WHITE}   • Panel: ${CYAN}$PTERODACTYL_DIR/panel/${NC}"
    echo -e "${WHITE}   • Wings: ${CYAN}$PTERODACTYL_DIR/wings/${NC}"
    echo -e "${WHITE}   • Volumes: ${CYAN}$PTERODACTYL_DIR/wings/volumes/${NC}"
    
    pause
}

# Menu de gerenciamento Panel
panel_menu() {
    while true; do
        show_logo
        echo -e "${BLUE}╔════════════════════════════════════════╗${NC}"
        echo -e "${BLUE}║      ${WHITE}GERENCIAR PTERODACTYL PANEL${BLUE}      ║${NC}"
        echo -e "${BLUE}╚════════════════════════════════════════╝${NC}"
        echo
        echo -e "${WHITE}1)${NC} ${GREEN}Instalar Panel${NC}"
        echo -e "${WHITE}2)${NC} ${YELLOW}Parar Panel${NC}"
        echo -e "${WHITE}3)${NC} ${CYAN}Iniciar Panel${NC}"
        echo -e "${WHITE}4)${NC} ${PURPLE}Ver Logs${NC}"
        echo -e "${WHITE}5)${NC} ${RED}Desinstalar Panel${NC}"
        echo -e "${WHITE}0)${NC} ${WHITE}Voltar ao Menu Principal${NC}"
        echo
        echo -ne "${YELLOW}Escolha uma opção: ${NC}"
        read -r choice
        
        case $choice in
            1) install_panel ;;
            2) 
                if [ -d "$PTERODACTYL_DIR/panel" ]; then
                    cd "$PTERODACTYL_DIR/panel"
                    docker compose down 2>/dev/null || docker-compose down
                    echo -e "${GREEN}Panel parado!${NC}"
                else
                    echo -e "${RED}Panel não encontrado!${NC}"
                fi
                pause
                ;;
            3) 
                if [ -d "$PTERODACTYL_DIR/panel" ]; then
                    cd "$PTERODACTYL_DIR/panel"
                    docker compose up -d 2>/dev/null || docker-compose up -d
                    echo -e "${GREEN}Panel iniciado!${NC}"
                else
                    echo -e "${RED}Panel não encontrado!${NC}"
                fi
                pause
                ;;
            4) 
                if [ -d "$PTERODACTYL_DIR/panel" ]; then
                    cd "$PTERODACTYL_DIR/panel"
                    docker compose logs -f 2>/dev/null || docker-compose logs -f
                else
                    echo -e "${RED}Panel não encontrado!${NC}"
                    pause
                fi
                ;;
            5) 
                echo -e "${RED}⚠️  Tem certeza que deseja desinstalar o Panel? (y/N): ${NC}"
                read -r confirm
                if [[ $confirm =~ ^[Yy]$ ]]; then
                    if [ -d "$PTERODACTYL_DIR/panel" ]; then
                        cd "$PTERODACTYL_DIR/panel"
                        docker compose down -v 2>/dev/null || docker-compose down -v
                        cd ..
                        rm -rf panel
                        echo -e "${GREEN}Panel desinstalado!${NC}"
                    else
                        echo -e "${RED}Panel não encontrado!${NC}"
                    fi
                fi
                pause
                ;;
            0) break ;;
            *) 
                echo -e "${RED}Opção inválida!${NC}"
                sleep 1
                ;;
        esac
    done
}

# Menu de gerenciamento Wings
wings_menu() {
    while true; do
        show_logo
        echo -e "${BLUE}╔════════════════════════════════════════╗${NC}"
        echo -e "${BLUE}║       ${WHITE}GERENCIAR PTERODACTYL WINGS${BLUE}      ║${NC}"
        echo -e "${BLUE}╚════════════════════════════════════════╝${NC}"
        echo
        echo -e "${WHITE}1)${NC} ${GREEN}Instalar Wings${NC}"
        echo -e "${WHITE}2)${NC} ${YELLOW}Parar Wings${NC}"
        echo -e "${WHITE}3)${NC} ${CYAN}Iniciar Wings${NC}"
        echo -e "${WHITE}4)${NC} ${PURPLE}Ver Logs${NC}"
        echo -e "${WHITE}5)${NC} ${RED}Desinstalar Wings${NC}"
        echo -e "${WHITE}0)${NC} ${WHITE}Voltar ao Menu Principal${NC}"
        echo
        echo -ne "${YELLOW}Escolha uma opção: ${NC}"
        read -r choice
        
        case $choice in
            1) install_wings ;;
            2) 
                if [ -d "$PTERODACTYL_DIR/wings" ]; then
                    cd "$PTERODACTYL_DIR/wings"
                    docker compose down 2>/dev/null || docker-compose down
                    echo -e "${GREEN}Wings parado!${NC}"
                else
                    echo -e "${RED}Wings não encontrado!${NC}"
                fi
                pause
                ;;
            3) 
                if [ -d "$PTERODACTYL_DIR/wings" ]; then
                    cd "$PTERODACTYL_DIR/wings"
                    docker compose up -d 2>/dev/null || docker-compose up -d
                    echo -e "${GREEN}Wings iniciado!${NC}"
                else
                    echo -e "${RED}Wings não encontrado!${NC}"
                fi
                pause
                ;;
            4) 
                if [ -d "$PTERODACTYL_DIR/wings" ]; then
                    cd "$PTERODACTYL_DIR/wings"
                    docker compose logs -f 2>/dev/null || docker-compose logs -f
                else
                    echo -e "${RED}Wings não encontrado!${NC}"
                    pause
                fi
                ;;
            5) 
                echo -e "${RED}⚠️  Tem certeza que deseja desinstalar o Wings? (y/N): ${NC}"
                read -r confirm
                if [[ $confirm =~ ^[Yy]$ ]]; then
                    if [ -d "$PTERODACTYL_DIR/wings" ]; then
                        cd "$PTERODACTYL_DIR/wings"
                        docker compose down -v 2>/dev/null || docker-compose down -v
                        cd ..
                        rm -rf wings
                        echo -e "${GREEN}Wings desinstalado!${NC}"
                    else
                        echo -e "${RED}Wings não encontrado!${NC}"
                    fi
                fi
                pause
                ;;
            0) break ;;
            *) 
                echo -e "${RED}Opção inválida!${NC}"
                sleep 1
                ;;
        esac
    done
}

# Menu principal
main_menu() {
    while true; do
        show_logo
        echo -e "${BLUE}╔════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║            ${WHITE}MENU PRINCIPAL${BLUE}               ║${NC}"
    echo -e "${BLUE}╚════════════════════════════════════════╝${NC}"
    echo
    echo -e "${WHITE}1)${NC} ${GREEN}Gerenciar Pterodactyl Panel${NC}"
    echo -e "${WHITE}2)${NC} ${CYAN}Gerenciar Pterodactyl Wings${NC}"
    echo -e "${WHITE}3)${NC} ${YELLOW}Status dos Serviços${NC}"
    echo -e "${WHITE}4)${NC} ${PURPLE}Instalar Tudo (Panel + Wings)${NC}"
    echo -e "${WHITE}0)${NC} ${RED}Sair${NC}"
    echo
    echo -ne "${YELLOW}Escolha uma opção: ${NC}"
    read -r choice
    
    case $choice in
        1) panel_menu ;;
        2) wings_menu ;;
        3) show_status ;;
        4) 
            echo -e "${CYAN}🚀 Instalando Panel e Wings...${NC}"
            install_panel
            install_wings
            show_status
            ;;
        0) 
            echo -e "\n${GREEN}👋 Obrigado por usar o Eric-One-Click!${NC}"
            echo -e "${CYAN}   Desenvolvido com ❤️  para a comunidade Pterodactyl${NC}"
            exit 0
            ;;
        *) 
            echo -e "${RED}Opção inválida! Tente novamente.${NC}"
            sleep 1
            ;;
    esac
done
}

# Função principal
main() {
    # Verificar dependências e configurar diretórios
    check_requirements
    
    # Mostrar menu principal
    main_menu
}

# Executar script
main "$@"
