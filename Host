#!/bin/bash
set -e

# Cores para interface
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Função para exibir o logo
show_logo() {
    clear
    echo -e "${PURPLE}╔══════════════════════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${PURPLE}║                                                                              ║${NC}"
    echo -e "${PURPLE}║  ${WHITE}███████╗██████╗ ██╗ ██████╗      ██████╗ ███╗   ██╗███████╗ ${CYAN}█████╗ ${PURPLE} ║${NC}"
    echo -e "${PURPLE}║  ${WHITE}██╔════╝██╔══██╗██║██╔════╝     ██╔═══██╗████╗  ██║██╔════╝${CYAN}██╔══██╗${PURPLE} ║${NC}"
    echo -e "${PURPLE}║  ${WHITE}█████╗  ██████╔╝██║██║          ██║   ██║██╔██╗ ██║█████╗  ${CYAN}██║  ╚═╝${PURPLE} ║${NC}"
    echo -e "${PURPLE}║  ${WHITE}██╔══╝  ██╔══██╗██║██║          ██║   ██║██║╚██╗██║██╔══╝  ${CYAN}██║  ██╗${PURPLE} ║${NC}"
    echo -e "${PURPLE}║  ${WHITE}███████╗██║  ██║██║╚██████╗     ╚██████╔╝██║ ╚████║███████╗${CYAN}╚█████╔╝${PURPLE} ║${NC}"
    echo -e "${PURPLE}║  ${WHITE}╚══════╝╚═╝  ╚═╝╚═╝ ╚═════╝      ╚═════╝ ╚═╝  ╚═══╝╚══════╝${CYAN} ╚════╝ ${PURPLE} ║${NC}"
    echo -e "${PURPLE}║                                                                              ║${NC}"
    echo -e "${PURPLE}║                      ${YELLOW}Pterodactyl One-Click Installer${PURPLE}                     ║${NC}"
    echo -e "${PURPLE}║                            ${CYAN}Versão 1.0 - by Eric${PURPLE}                           ║${NC}"
    echo -e "${PURPLE}║                                                                              ║${NC}"
    echo -e "${PURPLE}╚══════════════════════════════════════════════════════════════════════════════╝${NC}"
    echo
}

pause() {
    echo -e "\n${YELLOW}Pressione ENTER para continuar...${NC}"
    read -r
}

# Verifica Docker e define diretório
check_requirements() {
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}❌ Docker não está instalado!${NC}"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        echo -e "${RED}❌ Docker Compose não está disponível!${NC}"
        exit 1
    fi
    
    if [ "$EUID" -eq 0 ]; then
        PTERODACTYL_DIR="/opt/pterodactyl"
    else
        PTERODACTYL_DIR="$HOME/pterodactyl"
    fi
    
    if [ ! -d "$PTERODACTYL_DIR" ]; then
        mkdir -p "$PTERODACTYL_DIR" 2>/dev/null || sudo mkdir -p "$PTERODACTYL_DIR"
        sudo chown -R $USER:$USER "$PTERODACTYL_DIR" 2>/dev/null || true
    fi
    
    echo -e "${GREEN}✅ Diretório de instalação: $PTERODACTYL_DIR${NC}"
}

install_panel() {
    show_logo
    echo -e "${BLUE}Instalando Pterodactyl Panel...${NC}"
    
    mkdir -p "$PTERODACTYL_DIR/panel"/{var,nginx,database}
    
    cat > "$PTERODACTYL_DIR/panel/docker-compose.yml" << EOF
version: '3.8'

services:
  panel:
    image: ghcr.io/pterodactyl/panel:latest
    restart: always
    ports:
      - "8080:80"
    environment:
      - APP_URL=http://localhost:8080
      - APP_TIMEZONE=UTC
      - DB_HOST=database
      - DB_PORT=3306
      - DB_DATABASE=panel
      - DB_USERNAME=pterodactyl
      - DB_PASSWORD=CHANGE_ME_SECURE_PASSWORD
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_DRIVER=redis
      - REDIS_HOST=cache
    volumes:
      - "${PTERODACTYL_DIR}/panel/var:/app/var"
      - "${PTERODACTYL_DIR}/panel/nginx:/etc/nginx/conf.d"
    depends_on:
      - database
      - cache

  database:
    image: mariadb:10.11
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=CHANGE_ROOT_PASSWORD_SECURE
      - MYSQL_DATABASE=panel
      - MYSQL_USER=pterodactyl
      - MYSQL_PASSWORD=CHANGE_ME_SECURE_PASSWORD
    volumes:
      - "${PTERODACTYL_DIR}/panel/database:/var/lib/mysql"
    ports:
      - "3306:3306"

  cache:
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
EOF

    cd "$PTERODACTYL_DIR/panel"
    if docker compose version &> /dev/null; then
        docker compose up -d
    else
        docker-compose up -d
    fi

    echo -e "${GREEN}✅ Panel instalado!${NC}"
    pause
}

install_wings() {
    show_logo
    echo -e "${BLUE}Instalando Pterodactyl Wings...${NC}"
    
    mkdir -p "$PTERODACTYL_DIR/wings/data"
    
    cat > "$PTERODACTYL_DIR/wings/docker-compose.yml" << EOF
version: '3.8'

services:
  wings:
    image: ghcr.io/pterodactyl/wings:latest
    restart: always
    network_mode: host
    tty: true
    environment:
      TZ: "UTC"
      WINGS_UID: 988
      WINGS_GID: 988
      WINGS_USERNAME: pterodactyl
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "/var/lib/docker/containers/:/var/lib/docker/containers/"
      - "${PTERODACTYL_DIR}/wings/data:/etc/pterodactyl"
      - "/tmp/pterodactyl:/tmp/pterodactyl"
      - "/var/lib/pterodactyl:/var/lib/pterodactyl"
    working_dir: /etc/pterodactyl
EOF

    cd "$PTERODACTYL_DIR/wings"
    if docker compose version &> /dev/null; then
        docker compose up -d
    else
        docker-compose up -d
    fi

    echo -e "${GREEN}✅ Wings instalado!${NC}"
    pause
}

show_status() {
    show_logo
    echo -e "${CYAN}Verificando serviços...${NC}"
    
    cd "$PTERODACTYL_DIR/panel" 2>/dev/null && {
        if docker compose ps 2>/dev/null || docker-compose ps 2>/dev/null; then
            echo -e "${GREEN}Panel rodando${NC}"
        else
            echo -e "${YELLOW}Panel parado${NC}"
        fi
    } || echo -e "${RED}Panel não instalado${NC}"
    
    cd "$PTERODACTYL_DIR/wings" 2>/dev/null && {
        if docker compose ps 2>/dev/null || docker-compose ps 2>/dev/null; then
            echo -e "${GREEN}Wings rodando${NC}"
        else
            echo -e "${YELLOW}Wings parado${NC}"
        fi
    } || echo -e "${RED}Wings não instalado${NC}"
    
    pause
}

panel_menu() {
    while true; do
        show_logo
        echo -e "1) Instalar Panel\n2) Parar Panel\n3) Iniciar Panel\n4) Ver Logs\n5) Desinstalar Panel\n0) Voltar"
        read -r choice
        case $choice in
            1) install_panel ;;
            2) cd "$PTERODACTYL_DIR/panel" 2>/dev/null && { docker compose down 2>/dev/null || docker-compose down; echo "Panel parado"; pause; } ;;
            3) cd "$PTERODACTYL_DIR/panel" 2>/dev/null && { docker compose up -d 2>/dev/null || docker-compose up -d; echo "Panel iniciado"; pause; } ;;
            4) cd "$PTERODACTYL_DIR/panel" 2>/dev/null && { docker compose logs -f 2>/dev/null || docker-compose logs -f; } ;;
            5) cd "$PTERODACTYL_DIR/panel" 2>/dev/null && { docker compose down -v 2>/dev/null || docker-compose down -v; rm -rf "$PTERODACTYL_DIR/panel"; echo "Panel removido"; pause; } ;;
            0) break ;;
            *) echo "Opção inválida"; sleep 1 ;;
        esac
    done
}

wings_menu() {
    while true; do
        show_logo
        echo -e "1) Instalar Wings\n2) Parar Wings\n3) Iniciar Wings\n4) Ver Logs\n5) Desinstalar Wings\n0) Voltar"
        read -r choice
        case $choice in
            1) install_wings ;;
            2) cd "$PTERODACTYL_DIR/wings" 2>/dev/null && { docker compose down 2>/dev/null || docker-compose down; echo "Wings parado"; pause; } ;;
            3) cd "$PTERODACTYL_DIR/wings" 2>/dev/null && { docker compose up -d 2>/dev/null || docker-compose up -d; echo "Wings iniciado"; pause; } ;;
            4) cd "$PTERODACTYL_DIR/wings" 2>/dev/null && { docker compose logs -f 2>/dev/null || docker-compose logs -f; } ;;
            5) cd "$PTERODACTYL_DIR/wings" 2>/dev/null && { docker compose down -v 2>/dev/null || docker-compose down -v; rm -rf "$PTERODACTYL_DIR/wings"; echo "Wings removido"; pause; } ;;
            0) break ;;
            *) echo "Opção inválida"; sleep 1 ;;
        esac
    done
}

main_menu() {
    while true; do
        show_logo
        echo -e "1) Gerenciar Panel\n2) Gerenciar Wings\n3) Status dos Serviços\n4) Instalar Tudo\n0) Sair"
        read -r choice
        case $choice in
            1) panel_menu ;;
            2) wings_menu ;;
            3) show_status ;;
            4) install_panel; install_wings; show_status ;;
            0) echo "Saindo..."; exit 0 ;;
            *) echo "Opção inválida"; sleep 1 ;;
        esac
    done
}

main() {
    check_requirements
    main_menu
}

main "$@"
