#!/bin/bash
set -e

# Cores para interface
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Definir diretório de trabalho
PTERODACTYL_DIR="./pterodactyl"

# Função para exibir o logo
show_logo() {
    clear
    echo -e "${PURPLE}╔══════════════════════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${PURPLE}║                                                                              ║${NC}"
    echo -e "${PURPLE}║  ${WHITE}███████╗██████╗ ██╗ ██████╗      ██████╗ ███╗   ██╗███████╗ ${CYAN}█████╗ ${PURPLE} ║${NC}"
    echo -e "${PURPLE}║  ${WHITE}██╔════╝██╔══██╗██║██╔════╝     ██╔═══██╗████╗  ██║██╔════╝${CYAN}██╔══██╗${PURPLE} ║${NC}"
    echo -e "${PURPLE}║  ${WHITE}█████╗  ██████╔╝██║██║          ██║   ██║██╔██╗ ██║█████╗  ${CYAN}██║  ╚═╝${PURPLE} ║${NC}"
    echo -e "${PURPLE}║  ${WHITE}██╔══╝  ██╔══██╗██║██║          ██║   ██║██║╚██╗██║██╔══╝  ${CYAN}██║  ██╗${PURPLE} ║${NC}"
    echo -e "${PURPLE}║  ${WHITE}███████╗██║  ██║██║╚██████╗     ╚██████╔╝██║ ╚████║███████╗${CYAN}╚█████╔╝${PURPLE} ║${NC}"
    echo -e "${PURPLE}║  ${WHITE}╚══════╝╚═╝  ╚═╝╚═╝ ╚═════╝      ╚═════╝ ╚═╝  ╚═══╝╚══════╝${CYAN} ╚════╝ ${PURPLE} ║${NC}"
    echo -e "${PURPLE}║                                                                              ║${NC}"
    echo -e "${PURPLE}║                      ${YELLOW}Pterodactyl One-Click Installer${PURPLE}                     ║${NC}"
    echo -e "${PURPLE}║                            ${CYAN}Versão 1.0 - by Eric${PURPLE}                           ║${NC}"
    echo -e "${PURPLE}║                                                                              ║${NC}"
    echo -e "${PURPLE}╚══════════════════════════════════════════════════════════════════════════════╝${NC}"
    echo
}

# Função para pausar
pause() {
    echo -e "\n${YELLOW}Pressione ENTER para continuar...${NC}"
    read -r
}

# Função para verificar dependências e permissões
check_requirements() {
    # Verificar Docker
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}❌ Docker não está instalado!${NC}"
        echo -e "${YELLOW}Por favor, instale o Docker primeiro.${NC}"
        echo -e "${CYAN}Visite: https://docs.docker.com/get-docker/${NC}"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        echo -e "${RED}❌ Docker Compose não está disponível!${NC}"
        echo -e "${YELLOW}Por favor, instale o Docker Compose primeiro.${NC}"
        exit 1
    fi
    
    # Usar caminho absoluto para evitar problemas
    PTERODACTYL_DIR="$(pwd)/pterodactyl"
    
    # Verificar/criar diretório principal
    echo -e "${CYAN}📁 Criando diretório principal: $PTERODACTYL_DIR${NC}"
    
    if ! mkdir -p "$PTERODACTYL_DIR" 2>/dev/null; then
        echo -e "${RED}❌ Erro ao criar diretório!${NC}"
        echo -e "${YELLOW}Tentando com sudo...${NC}"
        sudo mkdir -p "$PTERODACTYL_DIR"
        sudo chown -R $USER:$USER "$PTERODACTYL_DIR"
    fi
    
    # Verificar permissões de escrita
    if [ ! -w "$PTERODACTYL_DIR" ]; then
        echo -e "${YELLOW}⚠️  Ajustando permissões do diretório...${NC}"
        sudo chown -R $USER:$USER "$PTERODACTYL_DIR" 2>/dev/null || {
            echo -e "${RED}❌ Sem permissão de escrita em: $PTERODACTYL_DIR${NC}"
            PTERODACTYL_DIR="/tmp/pterodactyl"
            mkdir -p "$PTERODACTYL_DIR"
            echo -e "${YELLOW}Usando diretório temporário: $PTERODACTYL_DIR${NC}"
        }
    fi
    
    echo -e "${GREEN}✅ Diretório de instalação: $PTERODACTYL_DIR${NC}"
}

# Função para corrigir permissões do Wings
fix_wings_permissions() {
    echo -e "${CYAN}🔧 Preparando ambiente para o Wings...${NC}"
    
    # Criar diretório temporário se não existir
    sudo mkdir -p /tmp/pterodactyl
    sudo chown -R $USER:$USER /tmp/pterodactyl
    sudo chmod 777 /tmp/pterodactyl
    
    echo -e "${GREEN}✅ Ambiente preparado para o Wings!${NC}"
}

# Função para criar usuário administrativo
create_admin_user() {
    show_logo
    echo -e "${BLUE}╔════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║       ${WHITE}CRIAR USUÁRIO ADMINISTRATIVO${BLUE}     ║${NC}"
    echo -e "${BLUE}╚════════════════════════════════════════╝${NC}"
    echo
    
    if [ ! -d "$PTERODACTYL_DIR/panel" ]; then
        echo -e "${RED}❌ Panel não está instalado!${NC}"
        echo -e "${YELLOW}Instale o Panel primeiro antes de criar usuários.${NC}"
        pause
        return 1
    fi
    
    if [ ! -f "$PTERODACTYL_DIR/panel/docker-compose.yml" ]; then
        echo -e "${RED}❌ Configuração do Panel não encontrada!${NC}"
        echo -e "${YELLOW}Reinstale o Panel ou verifique a instalação.${NC}"
        pause
        return 1
    fi
    
    # Verificar se o panel está rodando
    cd "$PTERODACTYL_DIR/panel"
    if ! docker compose ps -q >/dev/null 2>&1 && ! docker-compose ps -q >/dev/null 2>&1; then
        echo -e "${RED}❌ Panel não está rodando!${NC}"
        echo -e "${YELLOW}Iniciando Panel...${NC}"
        docker compose up -d 2>/dev/null || docker-compose up -d 2>/dev/null
        sleep 10
    fi
    cd - >/dev/null
    
    echo -e "${CYAN}👤 Vamos criar seu usuário administrativo...${NC}"
    echo
    
    # Coletar informações do usuário
    echo -ne "${YELLOW}Nome de usuário: ${NC}"
    read -r username
    
    echo -ne "${YELLOW}Email: ${NC}"
    read -r email
    
    echo -ne "${YELLOW}Nome completo: ${NC}"
    read -r fullname
    
    echo -ne "${YELLOW}Senha: ${NC}"
    read -rs password
    echo
    
    echo -ne "${YELLOW}Confirme a senha: ${NC}"
    read -rs password_confirm
    echo
    
    if [ "$password" != "$password_confirm" ]; then
        echo -e "${RED}❌ Senhas não coincidem!${NC}"
        pause
        return 1
    fi
    
    echo -e "${CYAN}🔄 Criando usuário administrativo...${NC}"
    
    # Executar comando no container
    cd "$PTERODACTYL_DIR/panel"
    CONTAINER_NAME=$(docker compose ps -q panel 2>/dev/null || docker-compose ps -q panel 2>/dev/null)
    
    if [ -z "$CONTAINER_NAME" ]; then
        echo -e "${RED}❌ Container do Panel não encontrado!${NC}"
        cd - >/dev/null
        pause
        return 1
    fi
    
    # Criar usuário usando artisan
    docker exec -it "$CONTAINER_NAME" php artisan p:user:make \
        --email="$email" \
        --username="$username" \
        --name-first="$(echo $fullname | cut -d' ' -f1)" \
        --name-last="$(echo $fullname | cut -d' ' -f2-)" \
        --password="$password" \
        --admin=1
    
    cd - >/dev/null
    
    if [ $? -eq 0 ]; then
        echo -e "\n${GREEN}✅ Usuário administrativo criado com sucesso!${NC}"
        echo -e "${YELLOW}📋 Informações do usuário:${NC}"
        echo -e "${WHITE}   • Nome de usuário: ${CYAN}$username${NC}"
        echo -e "${WHITE}   • Email: ${CYAN}$email${NC}"
        echo -e "${WHITE}   • Nome: ${CYAN}$fullname${NC}"
        echo -e "${WHITE}   • Tipo: ${CYAN}Administrador${NC}"
        echo
        echo -e "${GREEN}🌐 Acesse: ${CYAN}http://localhost:8080${NC}"
    else
        echo -e "${RED}❌ Erro ao criar usuário!${NC}"
        echo -e "${YELLOW}⚠️  Verifique se o Panel está funcionando corretamente.${NC}"
    fi
    
    pause
}

# Função para instalar Pterodactyl Panel
install_panel() {
    show_logo
    echo -e "${BLUE}╔════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║        ${WHITE}INSTALANDO PTERODACTYL PANEL${BLUE}    ║${NC}"
    echo -e "${BLUE}╚════════════════════════════════════════╝${NC}"
    echo
    
    echo -e "${CYAN}📁 Criando estrutura de pastas...${NC}"
    mkdir -p "$PTERODACTYL_DIR/panel"/{var,nginx,database}
    
    # Verificar se as pastas foram créadas
    if [ ! -d "$PTERODACTYL_DIR/panel" ]; then
        echo -e "${RED}❌ Falha ao criar estrutura de pastas!${NC}"
        return 1
    fi
    
    echo -e "${CYAN}📝 Criando configuração do Docker Compose...${NC}"
    
    # Criar docker-compose para o Painel
    cat > "$PTERODACTYL_DIR/panel/docker-compose.yml" << 'EOF'
version: '3.8'

services:
  panel:
    image: ghcr.io/pterodactyl/panel:latest
    restart: always
    ports:
      - "8080:80"
    environment:
      - APP_URL=http://localhost:8080
      - APP_TIMEZONE=UTC
      - DB_HOST=database
      - DB_PORT=3306
      - DB_DATABASE=panel
      - DB_USERNAME=pterodactyl
      - DB_PASSWORD=CHANGE_ME_SECURE_PASSWORD
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_DRIVER=redis
      - REDIS_HOST=cache
    volumes:
      - ./var/:/app/var
      - ./nginx/:/etc/nginx/conf.d
    depends_on:
      - database
      - cache

  database:
    image: mariadb:10.11
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=CHANGE_ROOT_PASSWORD_SECURE
      - MYSQL_DATABASE=panel
      - MYSQL_USER=pterodactyl
      - MYSQL_PASSWORD=CHANGE_ME_SECURE_PASSWORD
    volumes:
      - ./database:/var/lib/mysql
    ports:
      - "3306:3306"

  cache:
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
EOF

    echo -e "${CYAN}🚀 Iniciando containers...${NC}"
    cd "$PTERODACTYL_DIR/panel"
    
    # Usar docker compose (comando mais novo) ou docker-compose (comando legado)
    if docker compose version &> /dev/null; then
        docker compose up -d
    else
        docker-compose up -d
    fi
    
    cd - >/dev/null
    
    echo -e "\n${GREEN}✅ Pterodactyl Panel instalado com sucesso!${NC}"
    echo -e "${YELLOW}📋 Informações importantes:${NC}"
    echo -e "${WHITE}   • URL do Painel: ${CYAN}http://localhost:8080${NC}"
    echo -e "${WHITE}   • Banco de dados: MariaDB na porta 3306${NC}"
    echo -e "${WHITE}   • Cache: Redis na porta 6379${NC}"
    echo -e "${WHITE}   • Arquivos: $PTERODACTYL_DIR/panel/${NC}"
    echo
    echo -e "${RED}🔐 IMPORTANTE: Altere as senhas no docker-compose.yml antes de usar em produção!${NC}"
    echo -e "${BLUE}💡 PRÓXIMO PASSO: Crie um usuário administrativo no menu de gerenciamento!${NC}"
    
    pause
}

# Função para instalar Wings
install_wings() {
    show_logo
    echo -e "${BLUE}╔════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║         ${WHITE}INSTALANDO PTERODACTYL WINGS${BLUE}    ║${NC}"
    echo -e "${BLUE}╚════════════════════════════════════════╝${NC}"
    echo
    
    echo -e "${CYAN}🔧 Debug - Instalando em: $PTERODACTYL_DIR/wings${NC}"
    
    # Corrigir permissões primeiro
    fix_wings_permissions
    
    echo -e "${CYAN}📁 Criando estrutura de pastas...${NC}"
    
    # Criar diretório principal se não existir
    if ! mkdir -p "$PTERODACTYL_DIR/wings" 2>/dev/null; then
        echo -e "${RED}❌ Erro ao criar diretório principal!${NC}"
        echo -e "${YELLOW}Tentando com sudo...${NC}"
        sudo mkdir -p "$PTERODACTYL_DIR/wings"
        sudo chown -R $USER:$USER "$PTERODACTYL_DIR/wings"
    fi
    
    # Criar subdiretórios
    mkdir -p "$PTERODACTYL_DIR/wings/data"
    mkdir -p "$PTERODACTYL_DIR/wings/volumes"
    
    # Verificar se as pastas foram criadas
    if [ ! -d "$PTERODACTYL_DIR/wings" ]; then
        echo -e "${RED}❌ Falha ao criar estrutura de pastas!${NC}"
        echo -e "${YELLOW}📂 Tentando listar diretório pai:${NC}"
        ls -la "$PTERODACTYL_DIR/" 2>/dev/null || echo "Diretório pai não existe"
        pause
        return 1
    fi
    
    echo -e "${GREEN}✅ Estrutura de pastas criada${NC}"
    echo -e "${CYAN}📂 Verificando estrutura:${NC}"
    ls -la "$PTERODACTYL_DIR/wings/"
    
    echo -e "\n${CYAN}📝 Criando configuração do Docker Compose...${NC}"
    
    # Criar docker-compose para o Wings
    cat > "$PTERODACTYL_DIR/wings/docker-compose.yml" << 'EOF'
version: '3.8'

services:
  wings:
    image: ghcr.io/pterodactyl/wings:latest
    restart: always
    network_mode: host
    tty: true
    environment:
      TZ: "UTC"
      WINGS_UID: 988
      WINGS_GID: 988
      WINGS_USERNAME: pterodactyl
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./data:/etc/pterodactyl"
      - "/tmp/pterodactyl:/tmp/pterodactyl"
      - "./volumes:/var/lib/pterodactyl"
    working_dir: /etc/pterodactyl
EOF

    # Verificar se o arquivo foi criado
    if [ -f "$PTERODACTYL_DIR/wings/docker-compose.yml" ]; then
        echo -e "${GREEN}✅ docker-compose.yml criado com sucesso${NC}"
        echo -e "${CYAN}📄 Conteúdo do arquivo:${NC}"
        echo -e "${WHITE}$(head -5 "$PTERODACTYL_DIR/wings/docker-compose.yml")${NC}"
        echo -e "${WHITE}... (arquivo completo)${NC}"
    else
        echo -e "${RED}❌ Falha ao criar docker-compose.yml${NC}"
        echo -e "${YELLOW}📂 Conteúdo atual da pasta:${NC}"
        ls -la "$PTERODACTYL_DIR/wings/"
        pause
        return 1
    fi
    
    # Criar arquivo README com instruções
    cat > "$PTERODACTYL_DIR/wings/README.txt" << 'EOF'
PTERODACTYL WINGS - INSTRUÇÕES DE CONFIGURAÇÃO

1. Acesse o painel administrativo: http://localhost:8080
2. Faça login como administrador
3. Vá em "Admin" -> "Nodes" 
4. Clique em "Create New"
5. Preencha os dados do Node:
   - Name: Seu nome para o servidor
   - Location: Selecione uma localização
   - FQDN: localhost (ou seu domínio)
   - Communicate Over SSL: Desabilitado (para desenvolvimento local)
   - Memory: RAM disponível em MB
   - Disk: Espaço em disco em MB
   - Daemon Port: 8080 (padrão)
6. Após criar, clique em "Configuration"
7. Copie todo o conteúdo da configuração
8. Cole no arquivo: ./data/config.yml
9. Use o menu do script para iniciar o Wings

Para criar o arquivo config.yml:
nano ./data/config.yml

Para iniciar após configurar:
Opção 2 -> Gerenciar Pterodactyl Wings -> Opção 3 (Iniciar Wings)
EOF

    echo -e "\n${GREEN}✅ Pterodactyl Wings instalado com sucesso!${NC}"
    echo -e "${YELLOW}📋 Informações importantes:${NC}"
    echo -e "${WHITE}   • Wings preparado mas NÃO iniciado${NC}"
    echo -e "${WHITE}   • Localização: $PTERODACTYL_DIR/wings/${NC}"
    echo -e "${WHITE}   • Configuração: $PTERODACTYL_DIR/wings/data/${NC}"
    echo -e "${WHITE}   • Volumes: $PTERODACTYL_DIR/wings/volumes/${NC}"
    echo -e "${WHITE}   • Instruções: $PTERODACTYL_DIR/wings/README.txt${NC}"
    echo
    echo -e "${RED}⚠️  PRÓXIMOS PASSOS OBRIGATÓRIOS:${NC}"
    echo -e "${YELLOW}   1. Acesse: ${CYAN}http://localhost:8080${NC}"
    echo -e "${YELLOW}   2. Crie um Node no painel admin${NC}"
    echo -e "${YELLOW}   3. Copie a configuração para: ${CYAN}$PTERODACTYL_DIR/wings/data/config.yml${NC}"
    echo -e "${YELLOW}   4. Use 'Gerenciar Wings' → 'Iniciar Wings'${NC}"
    
    pause
}

# Função para mostrar status
show_status() {
    show_logo
    echo -e "${BLUE}╔════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║            ${WHITE}STATUS DOS SERVIÇOS${BLUE}          ║${NC}"
    echo -e "${BLUE}╚════════════════════════════════════════╝${NC}"
    echo
    
    echo -e "${CYAN}🔧 Debug - Diretório atual: $(pwd)${NC}"
    echo -e "${CYAN}🔧 Debug - Pterodactyl DIR: $PTERODACTYL_DIR${NC}"
    echo
    
    echo -e "${CYAN}🔍 Verificando Pterodactyl Panel...${NC}"
    echo -e "${WHITE}   📂 Verificando diretório: $PTERODACTYL_DIR/panel${NC}"
    
    if [ -d "$PTERODACTYL_DIR/panel" ]; then
        echo -e "${GREEN}   ✅ Diretório panel encontrado${NC}"
        
        if [ -f "$PTERODACTYL_DIR/panel/docker-compose.yml" ]; then
            echo -e "${GREEN}   ✅ docker-compose.yml encontrado${NC}"
            
            # Mudar para o diretório e verificar containers
            cd "$PTERODACTYL_DIR/panel"
            echo -e "${CYAN}   🔍 Verificando containers...${NC}"
            
            # Verificar se existem containers definidos
            if docker compose config --services >/dev/null 2>&1; then
                echo -e "${GREEN}   ✅ Configuração docker-compose válida${NC}"
                
                # Verificar se estão rodando
                RUNNING=$(docker compose ps -q 2>/dev/null)
                if [ -n "$RUNNING" ]; then
                    echo -e "${GREEN}   ✅ Panel RODANDO${NC}"
                    docker compose ps --format "table {{.Service}}\t{{.Status}}" 2>/dev/null || echo "   📊 Containers ativos detectados"
                else
                    echo -e "${YELLOW}   ⚠️  Panel INSTALADO mas PARADO${NC}"
                fi
            elif docker-compose config --services >/dev/null 2>&1; then
                echo -e "${GREEN}   ✅ Configuração docker-compose válida (legacy)${NC}"
                RUNNING=$(docker-compose ps -q 2>/dev/null)
                if [ -n "$RUNNING" ]; then
                    echo -e "${GREEN}   ✅ Panel RODANDO${NC}"
                    docker-compose ps --format "table {{.Service}}\t{{.Status}}" 2>/dev/null || echo "   📊 Containers ativos detectados"
                else
                    echo -e "${YELLOW}   ⚠️  Panel INSTALADO mas PARADO${NC}"
                fi
            else
                echo -e "${RED}   ❌ Configuração docker-compose inválida${NC}"
            fi
            cd - >/dev/null
        else
            echo -e "${RED}   ❌ docker-compose.yml NÃO encontrado${NC}"
            echo -e "${YELLOW}   📂 Conteúdo da pasta panel:${NC}"
            ls -la "$PTERODACTYL_DIR/panel/" 2>/dev/null || echo "   (pasta vazia ou inacessível)"
        fi
    else
        echo -e "${RED}   ❌ Diretório panel NÃO EXISTE${NC}"
    fi
    
    echo -e "\n${CYAN}🔍 Verificando Pterodactyl Wings...${NC}"
    echo -e "${WHITE}   📂 Verificando diretório: $PTERODACTYL_DIR/wings${NC}"
    
    if [ -d "$PTERODACTYL_DIR/wings" ]; then
        echo -e "${GREEN}   ✅ Diretório wings encontrado${NC}"
        
        if [ -f "$PTERODACTYL_DIR/wings/docker-compose.yml" ]; then
            echo -e "${GREEN}   ✅ docker-compose.yml encontrado${NC}"
            
            # Mudar para o diretório e verificar containers
            cd "$PTERODACTYL_DIR/wings"
            echo -e "${CYAN}   🔍 Verificando containers...${NC}"
            
            # Verificar se existem containers definidos
            if docker compose config --services >/dev/null 2>&1; then
                echo -e "${GREEN}   ✅ Configuração docker-compose válida${NC}"
                
                # Verificar se estão rodando
                RUNNING=$(docker compose ps -q 2>/dev/null)
                if [ -n "$RUNNING" ]; then
                    echo -e "${GREEN}   ✅ Wings RODANDO${NC}"
                    docker compose ps --format "table {{.Service}}\t{{.Status}}" 2>/dev/null || echo "   📊 Container wings ativo"
                else
                    echo -e "${YELLOW}   ⚠️  Wings INSTALADO mas PARADO${NC}"
                fi
            elif docker-compose config --services >/dev/null 2>&1; then
                echo -e "${GREEN}   ✅ Configuração docker-compose válida (legacy)${NC}"
                RUNNING=$(docker-compose ps -q 2>/dev/null)
                if [ -n "$RUNNING" ]; then
                    echo -e "${GREEN}   ✅ Wings RODANDO${NC}"
                    docker-compose ps --format "table {{.Service}}\t{{.Status}}" 2>/dev/null || echo "   📊 Container wings ativo"
                else
                    echo -e "${YELLOW}   ⚠️  Wings INSTALADO mas PARADO${NC}"
                fi
            else
                echo -e "${RED}   ❌ Configuração docker-compose inválida${NC}"
            fi
            
            # Verificar config.yml
            if [ -f "./data/config.yml" ]; then
                echo -e "${GREEN}   ✅ config.yml encontrado${NC}"
            else
                echo -e "${YELLOW}   ⚠️  config.yml NÃO encontrado${NC}"
            fi
            cd - >/dev/null
        else
            echo -e "${RED}   ❌ docker-compose.yml NÃO encontrado${NC}"
            echo -e "${YELLOW}   📂 Conteúdo da pasta wings:${NC}"
            ls -la "$PTERODACTYL_DIR/wings/" 2>/dev/null || echo "   (pasta vazia ou inacessível)"
        fi
    else
        echo -e "${RED}   ❌ Diretório wings NÃO EXISTE${NC}"
    fi
    
    echo -e "\n${CYAN}🌐 Informações de acesso:${NC}"
    echo -e "${WHITE}   • Panel URL: ${CYAN}http://localhost:8080${NC}"
    echo -e "${WHITE}   • Diretório: ${CYAN}$PTERODACTYL_DIR${NC}"
    
    pause
}

# Menu de gerenciamento Panel
panel_menu() {
    while true; do
        show_logo
        echo -e "${BLUE}╔════════════════════════════════════════╗${NC}"
        echo -e "${BLUE}║      ${WHITE}GERENCIAR PTERODACTYL PANEL${BLUE}      ║${NC}"
        echo -e "${BLUE}╚════════════════════════════════════════╝${NC}"
        echo
        echo -e "${WHITE}1)${NC} ${GREEN}Instalar Panel${NC}"
        echo -e "${WHITE}2)${NC} ${YELLOW}Parar Panel${NC}"
        echo -e "${WHITE}3)${NC} ${CYAN}Iniciar Panel${NC}"
        echo -e "${WHITE}4)${NC} ${PURPLE}Ver Logs${NC}"
        echo -e "${WHITE}5)${NC} ${BLUE}Criar Usuário Admin${NC}"
        echo -e "${WHITE}6)${NC} ${RED}Desinstalar Panel${NC}"
        echo -e "${WHITE}0)${NC} ${WHITE}Voltar ao Menu Principal${NC}"
        echo
        echo -ne "${YELLOW}Escolha uma opção: ${NC}"
        read -r choice
        
        case $choice in
            1) install_panel ;;
            2) 
                echo -e "${CYAN}🔍 Verificando se Panel está instalado...${NC}"
                if [ -d "$PTERODACTYL_DIR/panel" ] && [ -f "$PTERODACTYL_DIR/panel/docker-compose.yml" ]; then
                    echo -e "${CYAN}🔄 Parando Panel...${NC}"
                    cd "$PTERODACTYL_DIR/panel"
                    docker compose down 2>/dev/null || docker-compose down 2>/dev/null
                    cd - >/dev/null
                    echo -e "${GREEN}✅ Panel parado!${NC}"
                else
                    echo -e "${RED}❌ Panel não encontrado ou não instalado!${NC}"
                    echo -e "${YELLOW}💡 Use a opção 1 para instalar primeiro${NC}"
                fi
                pause
                ;;
            3) 
                echo -e "${CYAN}🔍 Verificando se Panel está instalado...${NC}"
                if [ -d "$PTERODACTYL_DIR/panel" ] && [ -f "$PTERODACTYL_DIR/panel/docker-compose.yml" ]; then
                    echo -e "${CYAN}🔄 Iniciando Panel...${NC}"
                    cd "$PTERODACTYL_DIR/panel"
                    docker compose up -d 2>/dev/null || docker-compose up -d 2>/dev/null
                    cd - >/dev/null
                    sleep 3
                    echo -e "${GREEN}✅ Panel iniciado!${NC}"
                    echo -e "${CYAN}🌐 Acesse: http://localhost:8080${NC}"
                else
                    echo -e "${RED}❌ Panel não encontrado ou não instalado!${NC}"
                    echo -e "${YELLOW}💡 Use a opção 1 para instalar primeiro${NC}"
                fi
                pause
                ;;
            4) 
                echo -e "${CYAN}🔍 Verificando se Panel está instalado...${NC}"
                if [ -d "$PTERODACTYL_DIR/panel" ] && [ -f "$PTERODACTYL_DIR/panel/docker-compose.yml" ]; then
                    echo -e "${CYAN}📋 Mostrando logs do Panel... (Ctrl+C para sair)${NC}"
                    cd "$PTERODACTYL_DIR/panel"
                    docker compose logs -f 2>/dev/null || docker-compose logs -f 2>/dev/null
                    cd - >/dev/null
                else
                    echo -e "${RED}❌ Panel não encontrado ou não instalado!${NC}"
                    echo -e "${YELLOW}💡 Use a opção 1 para instalar primeiro${NC}"
                    pause
                fi
                ;;
            5) create_admin_user ;;
            6) 
                echo -e "${RED}⚠️  Tem certeza que deseja desinstalar o Panel? (y/N): ${NC}"
                read -r confirm
                if [[ $confirm =~ ^[Yy]$ ]]; then
                    if [ -d "$PTERODACTYL_DIR/panel" ]; then
                        echo -e "${CYAN}🔄 Parando e removendo containers...${NC}"
                        cd "$PTERODACTYL_DIR/panel"
                        docker compose down -v 2>/dev/null || docker-compose down -v 2>/dev/null
                        cd - >/dev/null
                        echo -e "${CYAN}🗑️ Removendo arquivos...${NC}"
                        rm -rf "$PTERODACTYL_DIR/panel"
                        echo -e "${GREEN}✅ Panel desinstalado!${NC}"
                    else
                        echo -e "${RED}❌ Panel não encontrado!${NC}"
                    fi
                else
                    echo -e "${YELLOW}❌ Operação cancelada.${NC}"
                fi
                pause
                ;;
            0) break ;;
            *) 
                echo -e "${RED}Opção inválida!${NC}"
                sleep 1
                ;;
        esac
    done
}

# Menu de gerenciamento Wings
wings_menu() {
    while true; do
        show_logo
        echo -e "${BLUE}╔════════════════════════════════════════╗${NC}"
        echo -e "${BLUE}║       ${WHITE}GERENCIAR PTERODACTYL WINGS${BLUE}      ║${NC}"
        echo -e "${BLUE}╚════════════════════════════════════════╝${NC}"
        echo
        echo -e "${WHITE}1)${NC} ${GREEN}Instalar Wings${NC}"
        echo -e "${WHITE}2)${NC} ${YELLOW}Parar Wings${NC}"
        echo -e "${WHITE}3)${NC} ${CYAN}Iniciar Wings${NC}"
        echo -e "${WHITE}4)${NC} ${PURPLE}Ver Logs${NC}"
        echo -e "${WHITE}5)${NC} ${RED}Desinstalar Wings${NC}"
        echo -e "${WHITE}0)${NC} ${WHITE}Voltar ao Menu Principal${NC}"
        echo
        echo -ne "${YELLOW}Escolha uma opção: ${NC}"
        read -r choice
        
        case $choice in
            1) install_wings ;;
            2) 
                echo -e "${CYAN}🔍 Verificando se Wings está instalado...${NC}"
                if [ -d "$PTERODACTYL_DIR/wings" ] && [ -f "$PTERODACTYL_DIR/wings/docker-compose.yml" ]; then
                    echo -e "${CYAN}🔄 Parando Wings...${NC}"
                    cd "$PTERODACTYL_DIR/wings"
                    docker compose down 2>/dev/null || docker-compose down 2>/dev/null
                    cd - >/dev/null
                    echo -e "${GREEN}✅ Wings parado!${NC}"
                else
                    echo -e "${RED}❌ Wings não encontrado ou não instalado!${NC}"
                    echo -e "${YELLOW}💡 Use a opção 1 para instalar primeiro${NC}"
                fi
                pause
                ;;
            3) 
                echo -e "${CYAN}🔍 Verificando se Wings está instalado...${NC}"
                if [ -d "$PTERODACTYL_DIR/wings" ] && [ -f "$PTERODACTYL_DIR/wings/docker-compose.yml" ]; then
                    # Verificar se config.yml existe antes de iniciar
                    if [ ! -f "$PTERODACTYL_DIR/wings/data/config.yml" ]; then
                        echo -e "${RED}❌ Arquivo config.yml não encontrado!${NC}"
                        echo -e "${YELLOW}📋 Para iniciar o Wings você precisa:${NC}"
                        echo -e "${WHITE}   1. Acessar o painel: ${CYAN}http://localhost:8080${NC}"
                        echo -e "${WHITE}   2. Ir em Admin → Nodes${NC}"
                        echo -e "${WHITE}   3. Criar um novo Node${NC}"
                        echo -e "${WHITE}   4. Copiar a configuração gerada${NC}"
                        echo -e "${WHITE}   5. Salvar como: ${CYAN}$PTERODACTYL_DIR/wings/data/config.yml${NC}"
                        echo
                        echo -e "${CYAN}💡 Exemplo de comando para criar o arquivo:${NC}"
                        echo -e "${WHITE}   nano $PTERODACTYL_DIR/wings/data/config.yml${NC}"
                        echo -e "${WHITE}   ou${NC}"
                        echo -e "${WHITE}   cat > $PTERODACTYL_DIR/wings/data/config.yml${NC}"
                        echo -e "${WHITE}   (cole a configuração e pressione Ctrl+D)${NC}"
                        echo
                        echo -e "${YELLOW}Deseja continuar mesmo assim? (y/N): ${NC}"
                        read -r confirm
                        if [[ ! $confirm =~ ^[Yy]$ ]]; then
                            pause
                            continue
                        fi
                    fi
                    
                    echo -e "${CYAN}🔄 Iniciando Wings...${NC}"
                    cd "$PTERODACTYL_DIR/wings"
                    docker compose up -d 2>/dev/null || docker-compose up -d 2>/dev/null
                    
                    sleep 3
                    
                    # Verificar se iniciou com sucesso
                    RUNNING=$(docker compose ps -q 2>/dev/null || docker-compose ps -q 2>/dev/null)
                    if [ -n "$RUNNING" ]; then
                        echo -e "${GREEN}✅ Wings iniciado com sucesso!${NC}"
                        if [ -f "./data/config.yml" ]; then
                            echo -e "${GREEN}✅ Configurado e funcionando${NC}"
                        else
                            echo -e "${YELLOW}⚠️  Iniciado mas sem configuração válida${NC}"
                            echo -e "${YELLOW}⚠️  O Wings pode não funcionar corretamente${NC}"
                        fi
                    else
                        echo -e "${RED}❌ Erro ao iniciar Wings${NC}"
                        echo -e "${YELLOW}📋 Verificando logs...${NC}"
                        docker compose logs --tail=10 2>/dev/null || docker-compose logs --tail=10 2>/dev/null
                    fi
                    cd - >/dev/null
                else
                    echo -e "${RED}❌ Wings não encontrado ou não instalado!${NC}"
                    echo -e "${YELLOW}💡 Use a opção 1 para instalar primeiro${NC}"
                fi
                pause
                ;;
            4) 
                echo -e "${CYAN}🔍 Verificando se Wings está instalado...${NC}"
                if [ -d "$PTERODACTYL_DIR/wings" ] && [ -f "$PTERODACTYL_DIR/wings/docker-compose.yml" ]; then
                    echo -e "${CYAN}📋 Mostrando logs do Wings... (Ctrl+C para sair)${NC}"
                    cd "$PTERODACTYL_DIR/wings"
                    docker compose logs -f 2>/dev/null || docker-compose logs -f 2>/dev/null
                    cd - >/dev/null
                else
                    echo -e "${RED}❌ Wings não encontrado ou não instalado!${NC}"
                    echo -e "${YELLOW}💡 Use a opção 1 para instalar primeiro${NC}"
                    pause
                fi
                ;;
            5) 
                echo -e "${RED}⚠️  Tem certeza que deseja desinstalar o Wings? (y/N): ${NC}"
                read -r confirm
                if [[ $confirm =~ ^[Yy]$ ]]; then
                    if [ -d "$PTERODACTYL_DIR/wings" ]; then
                        echo -e "${CYAN}🔄 Parando e removendo containers...${NC}"
                        cd "$PTERODACTYL_DIR/wings"
                        docker compose down -v 2>/dev/null || docker-compose down -v 2>/dev/null
                        cd - >/dev/null
                        echo -e "${CYAN}🗑️ Removendo arquivos...${NC}"
                        rm -rf "$PTERODACTYL_DIR/wings"
                        echo -e "${GREEN}✅ Wings desinstalado!${NC}"
                    else
                        echo -e "${RED}❌ Wings não encontrado!${NC}"
                    fi
                else
                    echo -e "${YELLOW}❌ Operação cancelada.${NC}"
                fi
                pause
                ;;
            0) break ;;
            *) 
                echo -e "${RED}Opção inválida!${NC}"
                sleep 1
                ;;
        esac
    done
}

# Menu principal
main_menu() {
    while true; do
        show_logo
        echo -e "${BLUE}╔════════════════════════════════════════╗${NC}"
        echo -e "${BLUE}║            ${WHITE}MENU PRINCIPAL${BLUE}               ║${NC}"
        echo -e "${BLUE}╚════════════════════════════════════════╝${NC}"
        echo
        echo -e "${WHITE}1)${NC} ${GREEN}Gerenciar Pterodactyl Panel${NC}"
        echo -e "${WHITE}2)${NC} ${CYAN}Gerenciar Pterodactyl Wings${NC}"
        echo -e "${WHITE}3)${NC} ${YELLOW}Status dos Serviços${NC}"
        echo -e "${WHITE}4)${NC} ${PURPLE}Instalar Tudo (Panel + Wings)${NC}"
        echo -e "${WHITE}0)${NC} ${RED}Sair${NC}"
        echo
        echo -ne "${YELLOW}Escolha uma opção: ${NC}"
        read -r choice
        
        case $choice in
            1) panel_menu ;;
            2) wings_menu ;;
            3) show_status ;;
            4) 
                echo -e "${CYAN}🚀 Instalando Panel e Wings...${NC}"
                install_panel
                install_wings
                show_status
                ;;
            0) 
                echo -e "\n${GREEN}👋 Obrigado por usar o Eric-One-Click!${NC}"
                echo -e "${CYAN}   Desenvolvido com ❤️  para a comunidade Pterodactyl${NC}"
                exit 0
                ;;
            *) 
                echo -e "${RED}Opção inválida! Tente novamente.${NC}"
                sleep 1
                ;;
        esac
    done
}

# Função principal
main() {
    # Verificar dependências e configurar diretórios
    check_requirements
    
    # Mostrar menu principal
    main_menu
}

# Executar script
main "$@"
